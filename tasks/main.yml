---

- include_vars: "../vars/versions/{{ tomcat_version }}.yml"

# Main list of tasks to be executed.
#
#   Fail the play if it runs on an unsupported platform.
- name: Assert platform is supported
  tags: tomcat
  assert:
    that:
      - ansible_os_family in tomcat_supported_platforms
      - ansible_distribution in tomcat_supported_distributions


# - name: Include assets persistency tasks
#   tags: tomcat
#   include: ../../silpion.lib/tasks/datapersistency.yml
#   vars:
#     include_tags: tomcat
# - name: Include version
#   include: ../


- name: Create Tomcat group(s)
  group:
    state: present
    name: "{{ item.group | default(tomcat_default_user_group) }}"
  with_items: "{{ tomcat_instances }}"
  become: true
  tags: 
    - tomcat


- name: Create Tomcat user(s)
  user:
    state: present
    name: "{{ item.user | default(tomcat_default_user_name) }}"
    home: "{{ item.home | default(tomcat_default_user_home) }}"
    group: "{{ item.group | default(tomcat_default_user_group) }}"
    createhome: true
    comment: "Tomcat service user"
  with_items: "{{ tomcat_instances }}"
  become: true
  tags: 
    - tomcat


- name: Install catalina home directory
  file:
    state: directory
    dest: "{{ tomcat_env_catalina_home }}"
    owner: 0
    group: 0
    mode: 0755
  become: true
  tags: 
    - tomcat


- name: Download Tomcat
  get_url: 
    url: "{{ tomcat_download_url }}"
    dest: "{{ tomcat_install_base }}/{{ tomcat_redis_filename }}"
  tags:
    - tomcat
 

- name: Extract Tomcat installation files to catalina home
  command: tar
      -xzf /opt/{{ tomcat_redis_filename }}
      -C {{ tomcat_env_catalina_home }}
      --strip-components 1
  args:
    creates: "{{ tomcat_env_catalina_home }}/lib"
  become: true
  tags: 
    - tomcat


- name: Install instance directories
  file:
    state: directory
    dest: "{{ item.0.path | default(tomcat_default_instance_path) }}/catalina/{{ item.0.name }}/{{ item.1 }}"
    owner: "{{ item.0.user | default(tomcat_default_user_name) }}"
    group: "{{ item.0.group | default(tomcat_default_user_group) }}"
    mode: 0755
  with_nested:
    - "{{ tomcat_instances }}"
    - "{{ tomcat_instance_dirs }}"
  become: true
  tags: 
    - tomcat


- name: Register static/unmanaged conf files
  command: ls
      -1
      --ignore=web.xml
      --ignore=server.xml
      {{ tomcat_env_catalina_home }}/conf
  always_run: true
  changed_when: false
  #when: tomcat_fact_is_not_initial_check_mode
  register: tomcat_registered_conf_files
  tags: 
    - tomcat


- name: Install static/unmanaged conf files
  command: install
      --owner {{ item.0.user | default(tomcat_default_user_name) }}
      --group {{ item.0.group | default(tomcat_default_user_group) }}
      --mode 0640
      {{ tomcat_env_catalina_home }}/conf/{{ item.1 }}
      {{ item.0.path | default(tomcat_default_instance_path) }}/catalina/{{ item.0.name }}/conf/{{ item.1 }}
  with_nested:
    - "{{ tomcat_instances }}"
    - "{{ ( tomcat_registered_conf_files | default({})).stdout_lines | default([]) }}"
  args:
    creates: "{{ item.0.path|default(tomcat_default_instance_path) }}/catalina/{{ item.0.name }}/conf/{{ item.1 }}"
  #when: tomcat_fact_is_not_initial_check_mode
  become: true
  tags: 
    - tomcat


- name: Install instance server.xml
  template:
    src: "{{ item.server_xml_template | default(tomcat_default_server_xml_template) }}"
    dest: "{{ item.path | default(tomcat_default_instance_path) }}/catalina/{{ item.name }}/conf/server.xml"
    owner: "{{ item.user | default(tomcat_default_user_name) }}"
    group: "{{ item.group | default(tomcat_default_user_group) }}"
    mode: 0640
  with_items: "{{ tomcat_instances }}"
  register: tomcat_registered_install_server_xml
  become: true
  tags: 
    - tomcat


- name: Install instance web.xml
  template:
    src: "{{ item.web_xml_template | default(tomcat_default_web_xml_template) }}"
    dest: "{{ item.path | default(tomcat_default_instance_path) }}/catalina/{{ item.name }}/conf/web.xml"
    owner: "{{ item.user | default(tomcat_default_user_name) }}"
    group: "{{ item.group | default(tomcat_default_user_group) }}"
    mode: 0640
  with_items: "{{ tomcat_instances }}"
  register: tomcat_registered_install_web_xml
  become: true
  tags: 
    - tomcat


# Manage system services
- name: Configure service management
  when: ansible_local.util.init.system is defined
  include_vars: "service/{{ ansible_local.util.init.system }}.yml"
  tags: 
    - tomcat
    - tomcat_service


#   systemd requires to use separate environment files per instance
- name: Install instance environment files
  template:
    src: service_systemd_envfile.j2
    dest: "{{ item.path|default(tomcat_default_instance_path) }}/catalina/{{ item.name }}/.systemd.conf"
    owner: "{{ item.user|default(tomcat_default_user_name) }}"
    group: "{{ item.group|default(tomcat_default_user_group) }}"
    mode: 0644
  with_items: tomcat_instances
  when:
    - ansible_local.util.init.system is defined
    - ansible_local.util.init.system == 'systemd'
  register: tomcat_registered_install_instance_environment_files
  become: true
  tags: 
    - tomcat
    - tomcat_service

- debug: var="{{ ansible_distribution }}"

#   install a service file for tomcat
#     systemd by default uses a templated service (one unit, many instances)
- name: Install tomcat services
  template:
    src: "{{ item.service_template|default(tomcat_default_service_template) }}"
    dest: "{{ tomcat_service_dir }}/{{ item.service_file|default(tomcat_default_service_file) }}"
    owner: 0
    group: 0
    mode: "{{ tomcat_service_file_mode }}"
  with_items: "{{ tomcat_instances }}"
  #when: tomcat_fact_is_not_initial_check_mode
  register: tomcat_registered_install_tomcat_service
  become: true
  tags: 
    - tomcat
    - tomcat_service

#   reload systemd if service file(s) have changed
#     suppress warnings from systemd
- name: Reload systemd
  command: systemctl daemon-reload
  when:
    - tomcat_registered_install_tomcat_service.changed
    - ansible_local.util.init.system is defined
    - ansible_local.util.init.system == 'systemd'
  changed_when: false
  failed_when: false
  become: true
  tags: 
    - tomcat
    - tomcat_service


- name: Ensure tomcat service(s)
  service:
    state: started
    enabled: true
    name: "{{ item.service_name|default(tomcat_default_service_name) }}"
  with_items: tomcat_instances
  when: tomcat_fact_is_not_initial_check_mode
  become: true
  tags: 
    - tomcat
    - tomcat_service


#   Beware: Magic here
#     First of: register all instances which might have a changed event in various tasks
#       - instance configuration might have changed (server.xml)
#       - environment files for systemd might have changed
#       - service files might have changed
#     Result here is a dictionary containing the result of set_fact in a loop.
#       Each fact is stored at
#       - tomcat_registered_instances_requiring_restart.results.INDEX.ansible_facts.tomcat_fact_requires_restart_item
#       Values are one of
#       - tomcat service name in question (item.service_name) with sensible default
#       - None
# - name: Register instances requiring restart
#   tags: tomcat
#   register: tomcat_registered_instances_requiring_restart
#   with_items:
#     - "{{ (tomcat_registered_install_server_xml|default({})).results|default({}) }}"
#     - "{{ (tomcat_registered_install_web_xml|default({})).results|default({}) }}"
#     - "{{ (tomcat_registered_install_instance_environment_files|default({})).results|default({}) }}"
#     - "{{ (tomcat_registered_install_tomcat_service|default({})).results|default({}) }}"
#   when: tomcat_fact_is_not_initial_check_mode
#   set_fact:
#     tomcat_fact_requires_restart_item: "{{ item.item.service_name|default(tomcat_default_service_name) if item.item is defined and item.changed else 'None' }}"


#     This one maps all services in question from previous task into an iterable list
#       while stripping services named 'None'
# - name: Configure instances requiring restart
#   tags: tomcat
#   when: tomcat_fact_is_not_initial_check_mode
#   set_fact:
#     tomcat_facts_requires_restart: "{{ tomcat_registered_instances_requiring_restart.results|map(attribute='ansible_facts.tomcat_fact_requires_restart_item')|list|unique|difference(['None']) }}"


#     We can now safely notify the service restart handler which in turn just loops
#       over all items in the resulting list 'tomcat_facts_requires_restart'.
# - name: Trigger service handler
#   tags: tomcat
#   notify: service restart tomcat
#   command: /bin/true


# - name: Include local facts tasks
#   tags: tomcat
#   when: tomcat_fact_is_not_initial_check_mode
#   include: ../../silpion.lib/tasks/localfacts.yml
#   vars:
#     namespace: tomcat
